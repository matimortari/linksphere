generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SupportBanner {
  NONE
  LGBTQ_RIGHTS
  ANTI_RACISM
  MENTAL_HEALTH
  CLIMATE_ACTION
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  slug          String         @unique
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  description   String?
  public        Boolean?
  accounts      Account[]
  sessions      Session[]
  links         UserLink[]
  buttons       SocialButton[]
  settings      UserSettings?
  UserStats     UserStats[]
}

model UserLink {
  id        Int      @id @default(autoincrement())
  url       String
  title     String
  userId    String
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialButton {
  id        Int      @id @default(autoincrement())
  url       String
  platform  String
  icon      String
  userId    String
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                         Int           @id @default(autoincrement())
  userId                     String        @unique
  backgroundColor            String        @default("#e7e5e5")
  slugTextColor              String        @default("#1e1e1e")
  slugTextWeight             String        @default("500")
  slugTextSize               String        @default("1rem")
  headerTextColor            String        @default("#1e1e1e")
  buttonBackgroundColor      String        @default("#ffffff")
  buttonShadowColor          String        @default("#e7e5e5")
  buttonIconColor            String        @default("#1e1e1e")
  buttonHoverBackgroundColor String        @default("#eeeeee")
  linkBackgroundColor        String        @default("#ffffff")
  linkShadowColor            String        @default("#e7e5e5")
  linkTextColor              String        @default("#1e1e1e")
  linkHoverBackgroundColor   String        @default("#eeeeee")
  linkBorderRadius           String        @default("0.5rem")
  linkPadding                String        @default("0.5rem")
  supportBanner              SupportBanner @default(NONE)
  analyticsPaused            Boolean       @default(false)
  user                       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStats {
  id        Int      @id @default(autoincrement())
  userId    String
  views     Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
